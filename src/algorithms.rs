use lzo_sys as ffi;

#[derive(Copy, Clone)]
pub struct Algorithm {
    pub compress_functions: [Option<ffi::lzo_compress_t>; 12],
    pub decompress_function: ffi::lzo_decompress_t,
    pub optimize_function: Option<ffi::lzo_optimize_t>,
    pub workmem_size: [Option<u32>; 12],
}

pub const ONE: Algorithm = Algorithm {
    compress_functions: [
        Some(ffi::lzo1_compress),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::lzo1_99_compress),
        None,
    ],
    decompress_function: ffi::lzo1_decompress,
    optimize_function: None,
    workmem_size: [
        Some(ffi::LZO1_MEM_COMPRESS),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::LZO1_99_MEM_COMPRESS),
        None,
    ],
};

pub const ONE_A: Algorithm = Algorithm {
    compress_functions: [
        Some(ffi::lzo1a_compress),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::lzo1a_99_compress),
        None,
    ],
    decompress_function: ffi::lzo1a_decompress,
    optimize_function: None,
    workmem_size: [
        Some(ffi::LZO1A_MEM_COMPRESS),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::LZO1A_99_MEM_COMPRESS),
        None,
    ],
};

pub const ONE_B: Algorithm = Algorithm {
    compress_functions: [
        None,
        Some(ffi::lzo1b_1_compress),
        Some(ffi::lzo1b_2_compress),
        Some(ffi::lzo1b_3_compress),
        Some(ffi::lzo1b_4_compress),
        Some(ffi::lzo1b_5_compress),
        Some(ffi::lzo1b_6_compress),
        Some(ffi::lzo1b_7_compress),
        Some(ffi::lzo1b_8_compress),
        Some(ffi::lzo1b_9_compress),
        Some(ffi::lzo1b_99_compress),
        Some(ffi::lzo1b_999_compress),
    ],
    decompress_function: ffi::lzo1b_decompress,
    optimize_function: None,
    workmem_size: [
        Some(ffi::LZO1B_MEM_COMPRESS),
        Some(ffi::LZO1B_MEM_COMPRESS),
        Some(ffi::LZO1B_MEM_COMPRESS),
        Some(ffi::LZO1B_MEM_COMPRESS),
        Some(ffi::LZO1B_MEM_COMPRESS),
        Some(ffi::LZO1B_MEM_COMPRESS),
        Some(ffi::LZO1B_MEM_COMPRESS),
        Some(ffi::LZO1B_MEM_COMPRESS),
        Some(ffi::LZO1B_MEM_COMPRESS),
        Some(ffi::LZO1B_MEM_COMPRESS),
        Some(ffi::LZO1B_99_MEM_COMPRESS),
        Some(ffi::LZO1B_999_MEM_COMPRESS),
    ],
};

pub const ONE_C: Algorithm = Algorithm {
    compress_functions: [
        None,
        Some(ffi::lzo1c_1_compress),
        Some(ffi::lzo1c_2_compress),
        Some(ffi::lzo1c_3_compress),
        Some(ffi::lzo1c_4_compress),
        Some(ffi::lzo1c_5_compress),
        Some(ffi::lzo1c_6_compress),
        Some(ffi::lzo1c_7_compress),
        Some(ffi::lzo1c_8_compress),
        Some(ffi::lzo1c_9_compress),
        Some(ffi::lzo1c_99_compress),
        Some(ffi::lzo1c_999_compress),
    ],
    decompress_function: ffi::lzo1c_decompress,
    optimize_function: None,
    workmem_size: [
        Some(ffi::LZO1C_MEM_COMPRESS),
        Some(ffi::LZO1C_MEM_COMPRESS),
        Some(ffi::LZO1C_MEM_COMPRESS),
        Some(ffi::LZO1C_MEM_COMPRESS),
        Some(ffi::LZO1C_MEM_COMPRESS),
        Some(ffi::LZO1C_MEM_COMPRESS),
        Some(ffi::LZO1C_MEM_COMPRESS),
        Some(ffi::LZO1C_MEM_COMPRESS),
        Some(ffi::LZO1C_MEM_COMPRESS),
        Some(ffi::LZO1C_MEM_COMPRESS),
        Some(ffi::LZO1C_99_MEM_COMPRESS),
        Some(ffi::LZO1C_999_MEM_COMPRESS),
    ],
};

pub const ONE_F: Algorithm = Algorithm {
    compress_functions: [
        None,
        Some(ffi::lzo1f_1_compress),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::lzo1f_999_compress),
    ],
    decompress_function: ffi::lzo1f_decompress,
    optimize_function: None,
    workmem_size: [
        None,
        Some(ffi::LZO1F_MEM_COMPRESS),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::LZO1F_999_MEM_COMPRESS),
    ],
};

pub const ONE_X: Algorithm = Algorithm {
    compress_functions: [
        None,
        Some(ffi::lzo1x_1_compress),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::lzo1x_999_compress),
    ],
    decompress_function: ffi::lzo1x_decompress,
    optimize_function: Some(ffi::lzo1x_optimize),
    workmem_size: [
        None,
        Some(ffi::LZO1X_MEM_COMPRESS),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::LZO1X_1_999_MEM_COMPRESS),
    ],
};

pub const ONE_Y: Algorithm = Algorithm {
    compress_functions: [
        None,
        Some(ffi::lzo1y_1_compress),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::lzo1y_999_compress),
    ],
    decompress_function: ffi::lzo1y_decompress,
    optimize_function: None,
    workmem_size: [
        None,
        Some(ffi::LZO1Y_MEM_COMPRESS),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::LZO1Y_999_MEM_COMPRESS),
    ],
};

pub const ONE_Z: Algorithm = Algorithm {
    compress_functions: [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::lzo1z_999_compress),
    ],
    decompress_function: ffi::lzo1z_decompress,
    optimize_function: Some(ffi::lzo1y_optimize),
    workmem_size: [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::LZO1Z_999_MEM_COMPRESS),
    ],
};

pub const TWO_A: Algorithm = Algorithm {
    compress_functions: [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::lzo2a_999_compress),
    ],
    decompress_function: ffi::lzo2a_decompress,
    optimize_function: None,
    workmem_size: [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(ffi::LZO2A_999_MEM_COMPRESS),
    ],
};
